/// <reference lib="webworker" />

import { precacheAndRoute } from 'workbox-precaching';

declare global {
  interface WorkerNavigator {
    setAppBadge: (contents?: number) => Promise<void>;
    clearAppBadge: () => Promise<void>;
  }
}

declare const self: ServiceWorkerGlobalScope;

// Clean up caches in activate event to ensure no pages
// are using the old caches.
self.addEventListener('activate', (event) => {
  const promises = caches.keys().then((cacheNames) => {
    // Step through each cache name and delete it
    return Promise.all(cacheNames.map((cacheName) => caches.delete(cacheName)));
  });

  // Keep the service worker alive until all caches are deleted.
  event.waitUntil(promises);
});

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file, even if you decide not to use precaching.
precacheAndRoute(self.__WB_MANIFEST);

const showNotification = async () => {
  if (Notification.permission !== 'granted') {
    console.warn('No permission to show notifications');
    return;
  }

  return self.registration.showNotification('Test Notification', {
    body: 'You should feel vibrations',
    icon: './icon.png',
    vibrate: [200, 100, 200, 100, 200, 100, 200],
  });
};

self.addEventListener('message', (event) => {
  // This allows the web app to trigger skipWaiting via
  // registration.waiting.postMessage({type: 'SKIP_WAITING'})
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }

  if (event.data && event.data.type === 'SEND_NOTIFICATION') {
    console.log('SEND_NOTIFICATION event received by service worker');
    const promise = showNotification();
    event.waitUntil(promise);
  }
});

self.addEventListener('push', (event) => {
  console.info('Got push message');
  const promises: Promise<unknown>[] = [];

  if ('setAppBadge' in self.navigator) {
    // Promise to set the badge
    const promise = self.navigator.setAppBadge(1);
    promises.push(promise);
  }

  // Promise to show a notification
  promises.push(self.registration.showNotification(event.data?.text() || 'empty message'));

  // Finally...
  event.waitUntil(Promise.all(promises));
});
