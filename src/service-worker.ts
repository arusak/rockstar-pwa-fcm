/// <reference lib="webworker" />

import { precacheAndRoute } from 'workbox-precaching';
import { clientsClaim, skipWaiting } from 'workbox-core';

declare global {
  interface WorkerNavigator {
    setAppBadge: (contents?: number) => Promise<void>;
    clearAppBadge: () => Promise<void>;
  }
}

declare const self: ServiceWorkerGlobalScope;

skipWaiting();
clientsClaim();

const sendLog = async (message: string) => {
  console.info(message);
  const clients = await self.clients.matchAll({ includeUncontrolled: true, type: 'window' });

  clients.forEach(client => {
    client.postMessage({
      type: 'LOG',
      message
    });
  });
};

const showBadge = (count: number): Promise<void> => {
  if ('setAppBadge' in self.navigator) {
    return self.navigator.setAppBadge(count);
  }
  return Promise.resolve();
};

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file, even if you decide not to use precaching.
precacheAndRoute(self.__WB_MANIFEST);

const showNotification = async () => {
  if (Notification.permission !== 'granted') {
    sendLog('No permission to show notifications');
    return;
  }

  try {
    await self.registration.showNotification('Test Notification', {
      body: 'You should feel vibrations',
      icon: './icon.png',
      vibrate: [200, 100, 200, 100, 200, 100, 200],
    });
    sendLog('Test notification is sent successfully');
  } catch (e) {
    sendLog(`Error sending test notification: ${e}`);
  }
};

self.addEventListener('message', (event) => {
  sendLog(`${event.data.type} event received by service worker`);
  if (event.data && event.data.type === 'SEND_NOTIFICATION') {
    const promises: Promise<unknown>[] = [];

    promises.push(showNotification());

    if ('setAppBadge' in self.navigator) {
      promises.push(self.navigator.setAppBadge(1));
    }

    event.waitUntil(Promise.all(promises));
  }
});

self.addEventListener('push', (event) => {
  sendLog('Got push message');

  const promises: Promise<unknown>[] = [];

  const badgePromise = showBadge(1);
  promises.push(badgePromise);
  const notificationPromise = self.registration.showNotification(event.data?.text() || 'empty message');
  promises.push(notificationPromise);

  const all = Promise.all(promises).catch(e => sendLog(`Push processing failed. ${e}`));

  event.waitUntil(all);
});
